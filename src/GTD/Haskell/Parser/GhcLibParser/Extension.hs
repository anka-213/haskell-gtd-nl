{-# LANGUAGE LambdaCase #-}

module GTD.Haskell.Parser.GhcLibParser.Extension where

import GHC.LanguageExtensions (Extension (..))

readExtension :: String -> Maybe Extension
readExtension = \case
  "Cpp" -> Just Cpp
  "OverlappingInstances" -> Just OverlappingInstances
  "UndecidableInstances" -> Just UndecidableInstances
  "IncoherentInstances" -> Just IncoherentInstances
  "UndecidableSuperClasses" -> Just UndecidableSuperClasses
  "MonomorphismRestriction" -> Just MonomorphismRestriction
  "MonoLocalBinds" -> Just MonoLocalBinds
  "DeepSubsumption" -> Just DeepSubsumption
  "RelaxedPolyRec" -> Just RelaxedPolyRec
  "ExtendedDefaultRules" -> Just ExtendedDefaultRules
  "ForeignFunctionInterface" -> Just ForeignFunctionInterface
  "UnliftedFFITypes" -> Just UnliftedFFITypes
  "InterruptibleFFI" -> Just InterruptibleFFI
  "CApiFFI" -> Just CApiFFI
  "GHCForeignImportPrim" -> Just GHCForeignImportPrim
  "JavaScriptFFI" -> Just JavaScriptFFI
  "ParallelArrays" -> Just ParallelArrays
  "Arrows" -> Just Arrows
  "TemplateHaskell" -> Just TemplateHaskell
  "TemplateHaskellQuotes" -> Just TemplateHaskellQuotes
  "QualifiedDo" -> Just QualifiedDo
  "QuasiQuotes" -> Just QuasiQuotes
  "ImplicitParams" -> Just ImplicitParams
  "ImplicitPrelude" -> Just ImplicitPrelude
  "ScopedTypeVariables" -> Just ScopedTypeVariables
  "AllowAmbiguousTypes" -> Just AllowAmbiguousTypes
  "UnboxedTuples" -> Just UnboxedTuples
  "UnboxedSums" -> Just UnboxedSums
  "UnliftedNewtypes" -> Just UnliftedNewtypes
  "UnliftedDatatypes" -> Just UnliftedDatatypes
  "BangPatterns" -> Just BangPatterns
  "TypeFamilies" -> Just TypeFamilies
  "TypeFamilyDependencies" -> Just TypeFamilyDependencies
  "TypeInType" -> Just TypeInType
  "OverloadedStrings" -> Just OverloadedStrings
  "OverloadedLists" -> Just OverloadedLists
  "NumDecimals" -> Just NumDecimals
  "DisambiguateRecordFields" -> Just DisambiguateRecordFields
  "RecordWildCards" -> Just RecordWildCards
  "NamedFieldPuns" -> Just NamedFieldPuns
  "ViewPatterns" -> Just ViewPatterns
  "GADTs" -> Just GADTs
  "GADTSyntax" -> Just GADTSyntax
  "NPlusKPatterns" -> Just NPlusKPatterns
  "DoAndIfThenElse" -> Just DoAndIfThenElse
  "BlockArguments" -> Just BlockArguments
  "RebindableSyntax" -> Just RebindableSyntax
  "ConstraintKinds" -> Just ConstraintKinds
  "PolyKinds" -> Just PolyKinds
  "DataKinds" -> Just DataKinds
  "TypeData" -> Just TypeData
  "InstanceSigs" -> Just InstanceSigs
  "ApplicativeDo" -> Just ApplicativeDo
  "LinearTypes" -> Just LinearTypes
  "StandaloneDeriving" -> Just StandaloneDeriving
  "DeriveDataTypeable" -> Just DeriveDataTypeable
  "AutoDeriveTypeable" -> Just AutoDeriveTypeable
  "DeriveFunctor" -> Just DeriveFunctor
  "DeriveTraversable" -> Just DeriveTraversable
  "DeriveFoldable" -> Just DeriveFoldable
  "DeriveGeneric" -> Just DeriveGeneric
  "DefaultSignatures" -> Just DefaultSignatures
  "DeriveAnyClass" -> Just DeriveAnyClass
  "DeriveLift" -> Just DeriveLift
  "DerivingStrategies" -> Just DerivingStrategies
  "DerivingVia" -> Just DerivingVia
  "TypeSynonymInstances" -> Just TypeSynonymInstances
  "FlexibleContexts" -> Just FlexibleContexts
  "FlexibleInstances" -> Just FlexibleInstances
  "ConstrainedClassMethods" -> Just ConstrainedClassMethods
  "MultiParamTypeClasses" -> Just MultiParamTypeClasses
  "NullaryTypeClasses" -> Just NullaryTypeClasses
  "FunctionalDependencies" -> Just FunctionalDependencies
  "UnicodeSyntax" -> Just UnicodeSyntax
  "ExistentialQuantification" -> Just ExistentialQuantification
  "MagicHash" -> Just MagicHash
  "EmptyDataDecls" -> Just EmptyDataDecls
  "KindSignatures" -> Just KindSignatures
  "RoleAnnotations" -> Just RoleAnnotations
  "ParallelListComp" -> Just ParallelListComp
  "TransformListComp" -> Just TransformListComp
  "MonadComprehensions" -> Just MonadComprehensions
  "GeneralizedNewtypeDeriving" -> Just GeneralizedNewtypeDeriving
  "RecursiveDo" -> Just RecursiveDo
  "PostfixOperators" -> Just PostfixOperators
  "TupleSections" -> Just TupleSections
  "PatternGuards" -> Just PatternGuards
  "LiberalTypeSynonyms" -> Just LiberalTypeSynonyms
  "RankNTypes" -> Just RankNTypes
  "ImpredicativeTypes" -> Just ImpredicativeTypes
  "TypeOperators" -> Just TypeOperators
  "ExplicitNamespaces" -> Just ExplicitNamespaces
  "PackageImports" -> Just PackageImports
  "ExplicitForAll" -> Just ExplicitForAll
  "AlternativeLayoutRule" -> Just AlternativeLayoutRule
  "AlternativeLayoutRuleTransitional" -> Just AlternativeLayoutRuleTransitional
  "DatatypeContexts" -> Just DatatypeContexts
  "NondecreasingIndentation" -> Just NondecreasingIndentation
  "RelaxedLayout" -> Just RelaxedLayout
  "TraditionalRecordSyntax" -> Just TraditionalRecordSyntax
  "LambdaCase" -> Just LambdaCase
  "MultiWayIf" -> Just MultiWayIf
  "BinaryLiterals" -> Just BinaryLiterals
  "NegativeLiterals" -> Just NegativeLiterals
  "HexFloatLiterals" -> Just HexFloatLiterals
  "DuplicateRecordFields" -> Just DuplicateRecordFields
  "OverloadedLabels" -> Just OverloadedLabels
  "EmptyCase" -> Just EmptyCase
  "PatternSynonyms" -> Just PatternSynonyms
  "PartialTypeSignatures" -> Just PartialTypeSignatures
  "NamedWildCards" -> Just NamedWildCards
  "StaticPointers" -> Just StaticPointers
  "TypeApplications" -> Just TypeApplications
  "Strict" -> Just Strict
  "StrictData" -> Just StrictData
  "EmptyDataDeriving" -> Just EmptyDataDeriving
  "NumericUnderscores" -> Just NumericUnderscores
  "QuantifiedConstraints" -> Just QuantifiedConstraints
  "StarIsType" -> Just StarIsType
  "ImportQualifiedPost" -> Just ImportQualifiedPost
  "CUSKs" -> Just CUSKs
  "StandaloneKindSignatures" -> Just StandaloneKindSignatures
  "LexicalNegation" -> Just LexicalNegation
  "FieldSelectors" -> Just FieldSelectors
  "OverloadedRecordDot" -> Just OverloadedRecordDot
  "OverloadedRecordUpdate" -> Just OverloadedRecordUpdate
  _ -> Nothing